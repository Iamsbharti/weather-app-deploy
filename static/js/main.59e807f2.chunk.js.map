{"version":3,"sources":["Components/weatherContext.js","Components/Location.js","Components/SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["React","createContext","Provider","Consumer","WeatherContextProvider","props","useState","query","setQuery","weather","setWeather","value","updateQuery","newQuery","search","fetch","process","then","response","json","data","children","Location","main","message","className","name","sys","country","d1","day","getDay","date","getDate","month","getMonth","fullYear","getFullYear","dateBuilder","Date","Math","round","temp","style","fontSize","textShadow","SearchBox","type","placeholder","onChange","e","target","onKeyPress","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"4KAC+BA,IAAMC,gBAA7BC,E,EAAAA,SAAUC,E,EAAAA,SAElB,SAASC,EAAuBC,GAAQ,IAAD,EACXC,mBAAS,IADE,mBAC9BC,EAD8B,KACvBC,EADuB,OAEPF,mBAAS,IAFF,mBAE9BG,EAF8B,KAErBC,EAFqB,KAkBrC,OACE,kBAACR,EAAD,CACES,MAAO,CACLJ,MAAOA,EACPK,YAlBc,SAACC,GACnBL,EAASK,IAkBLC,OAhBS,SAACP,GAIdQ,MAAM,GAAD,OAHKC,2CAGL,qBAAoBT,EAApB,kBAFKS,qCAGPC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAUV,EAAWU,OAWzBX,QAASA,IAGVJ,EAAMgB,UC5BE,SAASC,IAiCtB,OACE,kBAAC,EAAD,MACG,gBAAGb,EAAH,EAAGA,QAAH,MACwB,oBAAhBA,EAAQc,KACO,mBAApBd,EAAQe,QACN,oCACE,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,YACZhB,EAAQiB,KADX,IACkBjB,EAAQkB,IAAIC,SAE9B,yBAAKH,UAAU,QA1CT,SAACI,GACnB,IAwBIC,EAVS,CACX,SACA,SACA,UACA,YACA,WACA,SACA,YAGaD,EAAGE,UACdC,EAAOH,EAAGI,UACVC,EA1BW,CACb,MACA,MACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAciBL,EAAGM,YAClBC,EAAWP,EAAGQ,cAElB,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAYCE,CAAY,IAAIC,QAEzC,yBAAKd,UAAU,eACb,yBAAKA,UAAU,QACZe,KAAKC,MAAMhC,EAAQc,KAAKmB,KAAO,QADlC,SAGA,yBAAKjB,UAAU,WAAWhB,EAAQA,QAAQ,GAAGc,QAIjD,GAGF,yBAAKE,UAAU,eACb,yBACEA,UAAU,OACVkB,MAAO,CAAEC,SAAU,OAAQC,WAAY,SAFzC,sBCzDG,SAASC,IAEtB,OACE,kBAAC,EAAD,MACG,gBAAGhC,EAAH,EAAGA,OAAQP,EAAX,EAAWA,MAAOK,EAAlB,EAAkBA,YAAlB,OACC,yBAAKa,UAAU,cACb,2BACEsB,KAAK,OACLC,YAAY,YACZtB,KAAK,SACLD,UAAU,aACVd,MAAOJ,EACP0C,SAAU,SAACC,GAAD,OAAOtC,EAAYsC,EAAEC,OAAOxC,QACtCyC,WAAY,SAACF,GAAD,OAAOpC,EAAOP,UCYvB8C,MAvBf,WACE,OACE,kBAAC,EAAD,MACG,gBAAG5C,EAAH,EAAGA,QAAH,OACC,yBACEgB,UAC0B,qBAAjBhB,EAAQc,KACXiB,KAAKC,MAAMhC,EAAQc,KAAKmB,KAAO,QAAU,GACvC,WACA,WACF,OAGN,8BACE,kBAACI,EAAD,MACA,kBAACxB,EAAD,YCPQgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAACxD,EAAD,KACE,kBAAC,IAAMyD,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjD,MAAK,SAAAkD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM9C,a","file":"static/js/main.59e807f2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nconst { Provider, Consumer } = React.createContext();\n\nfunction WeatherContextProvider(props) {\n  const [query, setQuery] = useState(\"\");\n  const [weather, setWeather] = useState({});\n\n  const updateQuery = (newQuery) => {\n    setQuery(newQuery);\n  };\n  const search = (query) => {\n    let url = process.env.REACT_APP_WEATHER_API_URL;\n    let key = process.env.REACT_APP_WEATHER_API_KEY;\n\n    fetch(`${url}weather?q=${query}&appid=${key}`)\n      .then((response) => response.json())\n      .then((data) => setWeather(data));\n  };\n\n  //console.log(weather.message);\n\n  return (\n    <Provider\n      value={{\n        query: query,\n        updateQuery: updateQuery,\n        search: search,\n        weather: weather,\n      }}\n    >\n      {props.children}\n    </Provider>\n  );\n}\n\nexport { WeatherContextProvider, Consumer as WeatherContextConsumer };\n","import React from \"react\";\nimport { WeatherContextConsumer } from \"./weatherContext\";\nexport default function Location() {\n  const dateBuilder = (d1) => {\n    const months = [\n      \"Jan\",\n      \"Feb\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    const days = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"wednesday\",\n      \"Thrusday\",\n      \"Friday\",\n      \"Saturday\",\n    ];\n\n    let day = days[d1.getDay()];\n    let date = d1.getDate();\n    let month = months[d1.getMonth()];\n    let fullYear = d1.getFullYear();\n\n    return `${day} ${date} ${month} ${fullYear}`;\n  };\n  return (\n    <WeatherContextConsumer>\n      {({ weather }) =>\n        typeof weather.main != \"undefined\" ? (\n          weather.message !== \"city not found\" ? (\n            <>\n              <div className=\"location-box\">\n                <div className=\"location\">\n                  {weather.name},{weather.sys.country}\n                </div>\n                <div className=\"date\">{dateBuilder(new Date())}</div>\n              </div>\n              <div className=\"weather-box\">\n                <div className=\"temp\">\n                  {Math.round(weather.main.temp - 273.15)}&deg;c\n                </div>\n                <div className=\"weather\">{weather.weather[0].main}</div>\n              </div>\n            </>\n          ) : (\n            \"\"\n          )\n        ) : (\n          <div className=\"weather-box\">\n            <div\n              className=\"temp\"\n              style={{ fontSize: \"19px\", textShadow: \"none\" }}\n            >\n              City Not Found\n            </div>\n          </div>\n        )\n      }\n    </WeatherContextConsumer>\n  );\n}\n","import React from \"react\";\nimport { WeatherContextConsumer } from \"./weatherContext\";\nexport default function SearchBox() {\n  //const [query, setQuery] = useState(\"\");\n  return (\n    <WeatherContextConsumer>\n      {({ search, query, updateQuery }) => (\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            placeholder=\"search...\"\n            name=\"search\"\n            className=\"search-bar\"\n            value={query}\n            onChange={(e) => updateQuery(e.target.value)}\n            onKeyPress={(e) => search(query)}\n          />\n        </div>\n      )}\n    </WeatherContextConsumer>\n  );\n}\n","import React from \"react\";\nimport Location from \"./Components/Location\";\nimport SearchBox from \"./Components/SearchBox\";\nimport { WeatherContextConsumer } from \"./Components/weatherContext\";\nfunction App() {\n  return (\n    <WeatherContextConsumer>\n      {({ weather }) => (\n        <div\n          className={\n            typeof weather.main !== \"undefined\"\n              ? Math.round(weather.main.temp - 273.15) > 16\n                ? \"app warm\"\n                : \"app cold\"\n              : \"app\"\n          }\n        >\n          <main>\n            <SearchBox />\n            <Location />\n          </main>\n        </div>\n      )}\n    </WeatherContextConsumer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { WeatherContextProvider } from \"./Components/weatherContext\";\nReactDOM.render(\n  <WeatherContextProvider>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </WeatherContextProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}